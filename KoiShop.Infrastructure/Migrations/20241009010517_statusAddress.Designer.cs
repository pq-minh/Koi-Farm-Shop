// <auto-generated />
using System;
using KoiShop.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoiShop.Infrastructure.Migrations
{
    [DbContext(typeof(KoiShopV1DbContext))]
    [Migration("20241009010517_statusAddress")]
    partial class statusAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoiShop.Domain.Entities.AddressDetail", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Dictrict")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<string>("StreetName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ward")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AddressId")
                        .HasName("PK__AddressD__091C2A1BC4C35DB2");

                    b.HasIndex("UserId");

                    b.ToTable("AddressDetails");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.BatchKoi", b =>
                {
                    b.Property<int>("BatchKoiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BatchKoiID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchKoiId"));

                    b.Property<int?>("BatchTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BatchTypeID");

                    b.Property<string>("Certificate")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Origin")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Personality")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Quantity")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Size")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Status")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("BatchKoiId")
                        .HasName("PK__BatchKoi__29AF8367B4ED895F");

                    b.HasIndex("BatchTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("BatchKoi", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.BatchKoiCategory", b =>
                {
                    b.Property<int>("BatchTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BatchTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchTypeId"));

                    b.Property<string>("TypeBatch")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BatchTypeId")
                        .HasName("PK__BatchKoi__752A87CE3D96F085");

                    b.ToTable("BatchKoiCategory", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartItemsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemsID"));

                    b.Property<int?>("BatchKoiId")
                        .HasColumnType("int");

                    b.Property<int?>("KoiId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<float?>("TotalPrice")
                        .HasColumnType("real")
                        .HasColumnName("TotalPrice");

                    b.Property<float?>("UnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("UnitPrice");

                    b.HasKey("CartItemsID");

                    b.HasIndex("BatchKoiId");

                    b.HasIndex("KoiId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateOnly?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double?>("DiscountRate")
                        .HasColumnType("float")
                        .HasColumnName("Discount_rate");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_Date");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_Date");

                    b.Property<int?>("Status")
                        .IsUnicode(true)
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("Used")
                        .HasColumnType("int");

                    b.HasKey("DiscountId")
                        .HasName("PK__Discount__E43F6DF6B0C0E919");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Koi", b =>
                {
                    b.Property<int>("KoiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KoiID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KoiId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Certificate")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int?>("FishTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FishTypeID");

                    b.Property<string>("Gender")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Origin")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Personality")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("Size")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("KoiId")
                        .HasName("PK__Koi__E03435B83F39E659");

                    b.HasIndex("FishTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Koi", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.KoiCategory", b =>
                {
                    b.Property<int>("FishTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FishTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FishTypeId"));

                    b.Property<string>("TypeFish")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("FishTypeId")
                        .HasName("PK__KoiCateg__3D3EB8EE1589D08A");

                    b.ToTable("KoiCategory", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly?>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("CreateDate");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    b.Property<string>("OrderStatus")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OrderStatus");

                    b.Property<float?>("TotalAmount")
                        .HasColumnType("real")
                        .HasColumnName("TotalAmount");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__C3905BAF06FAB913");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailsId"));

                    b.Property<int?>("BatchKoiId")
                        .HasColumnType("int")
                        .HasColumnName("BatchKoiID");

                    b.Property<int?>("KoiId")
                        .HasColumnType("int")
                        .HasColumnName("KoiID");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ToTalQuantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailsId")
                        .HasName("PK__OrderDet__9DD74D9DC61284A3");

                    b.HasIndex("BatchKoiId");

                    b.HasIndex("KoiId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<int?>("BatchKoiId")
                        .HasColumnType("int")
                        .HasColumnName("BatchKoiID");

                    b.Property<int?>("KoiId")
                        .HasColumnType("int")
                        .HasColumnName("KoiID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PackageId")
                        .HasName("PK__Package__322035EC7EC9D4C4");

                    b.HasIndex("BatchKoiId");

                    b.HasIndex("KoiId");

                    b.ToTable("Package", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Payment", b =>
                {
                    b.Property<int?>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PaymentID"));

                    b.Property<DateOnly?>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("CreateDate");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("PaymenMethod")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PaymentMethod");

                    b.Property<string>("Status")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostID"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<string>("TypePost")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypePost");

                    b.Property<DateOnly>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostID");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Quotation", b =>
                {
                    b.Property<int>("QuotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuotationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationId"));

                    b.Property<DateOnly?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuotationId")
                        .HasName("PK__Quotatio__E19752B367481ECA");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Quotation", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<double?>("AgreementPrice")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("ConsignmentDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.Property<int?>("RelationalRequestId")
                        .HasColumnType("int")
                        .HasColumnName("RelationalRequestID");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TypeRequest")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestId")
                        .HasName("PK__Request__33A8519A4AC926BF");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("BatchKoiId")
                        .HasColumnType("int")
                        .HasColumnName("BatchKoiID");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int?>("KoiId")
                        .HasColumnType("int")
                        .HasColumnName("KoiID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__74BC79AE76B23DCF");

                    b.HasIndex("BatchKoiId");

                    b.HasIndex("KoiId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShoppingCartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartID"));

                    b.Property<DateOnly?>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("CreateDate");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShoppingCartID");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.AddressDetail", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.User", "User")
                        .WithMany("AddressDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.BatchKoi", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.BatchKoiCategory", "BatchType")
                        .WithMany("BatchKois")
                        .HasForeignKey("BatchTypeId")
                        .HasConstraintName("FK__BatchKoi__BatchT__4D94879B");

                    b.HasOne("KoiShop.Domain.Entities.User", "User")
                        .WithMany("BatchKois")
                        .HasForeignKey("UserId");

                    b.Navigation("BatchType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.BatchKoi", "BatchKoi")
                        .WithMany("CartItems")
                        .HasForeignKey("BatchKoiId");

                    b.HasOne("KoiShop.Domain.Entities.Koi", "Koi")
                        .WithMany("CartItems")
                        .HasForeignKey("KoiId");

                    b.HasOne("KoiShop.Domain.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId");

                    b.Navigation("BatchKoi");

                    b.Navigation("Koi");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Koi", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.KoiCategory", "FishType")
                        .WithMany("Kois")
                        .HasForeignKey("FishTypeId")
                        .HasConstraintName("FK__Koi__FishTypeID__4CA06362");

                    b.HasOne("KoiShop.Domain.Entities.User", "User")
                        .WithMany("Kois")
                        .HasForeignKey("UserId");

                    b.Navigation("FishType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Order", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.Discount", null)
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId");

                    b.HasOne("KoiShop.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.BatchKoi", "BatchKoi")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BatchKoiId")
                        .HasConstraintName("FK__OrderDeta__Batch__4E88ABD4");

                    b.HasOne("KoiShop.Domain.Entities.Koi", "Koi")
                        .WithMany("OrderDetails")
                        .HasForeignKey("KoiId")
                        .HasConstraintName("FK__OrderDeta__KoiID__4F7CD00D");

                    b.HasOne("KoiShop.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderDeta__Order__4BAC3F29");

                    b.Navigation("BatchKoi");

                    b.Navigation("Koi");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Package", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.BatchKoi", "BatchKoi")
                        .WithMany("Packages")
                        .HasForeignKey("BatchKoiId")
                        .HasConstraintName("FK__Package__BatchKo__5441852A");

                    b.HasOne("KoiShop.Domain.Entities.Koi", "Koi")
                        .WithMany("Packages")
                        .HasForeignKey("KoiId")
                        .HasConstraintName("FK__Package__KoiID__534D60F1");

                    b.Navigation("BatchKoi");

                    b.Navigation("Koi");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Payment", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Post", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Quotation", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.Request", "Request")
                        .WithMany("Quotations")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK__Quotation__Reque__52593CB8");

                    b.HasOne("KoiShop.Domain.Entities.User", "User")
                        .WithMany("Quotations")
                        .HasForeignKey("UserId");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Request", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.Package", "Package")
                        .WithMany("Requests")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("FK__Request__Package__5535A963");

                    b.HasOne("KoiShop.Domain.Entities.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Review", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.BatchKoi", "BatchKoi")
                        .WithMany("Reviews")
                        .HasForeignKey("BatchKoiId")
                        .HasConstraintName("FK__Review__BatchKoi__5165187F");

                    b.HasOne("KoiShop.Domain.Entities.Koi", "Koi")
                        .WithMany("Reviews")
                        .HasForeignKey("KoiId")
                        .HasConstraintName("FK__Review__KoiID__5070F446");

                    b.HasOne("KoiShop.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("BatchKoi");

                    b.Navigation("Koi");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.User", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiShop.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KoiShop.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.BatchKoi", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("Packages");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.BatchKoiCategory", b =>
                {
                    b.Navigation("BatchKois");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Koi", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("Packages");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.KoiCategory", b =>
                {
                    b.Navigation("Kois");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Package", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.Request", b =>
                {
                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("KoiShop.Domain.Entities.User", b =>
                {
                    b.Navigation("AddressDetails");

                    b.Navigation("BatchKois");

                    b.Navigation("Kois");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("Quotations");

                    b.Navigation("Requests");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCarts");
                });
#pragma warning restore 612, 618
        }
    }
}
